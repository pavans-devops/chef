2.5 Working with not_if and only_if guards
------------------------------------------
add the code to existing ruby file

file '/etc/motd' do
  content 'welcome to my server'
end
:wq

#run chef locally

#update if file exists
vi learn.rb
execute 'command-test' do
  command 'echo blah >> /etc/motd'
  only_if 'test -r /etc/motd'
end

#run chef locally


#run if file doesn't exists
vi learn.rb
execute 'command-test' do
  command 'echo blah >> /etc/motd'
  not_if 'test -r /etc/motd'
end

#run chef locally

#update if file exists
vi learn.rb
execute 'command-test' do
  command 'echo blah >> /etc/motd'
  only_if { ::File.exists?('/etc/motd'0 }
end

#run locally
chef-client -z learn.rb

2.6 Extending Chef with Custom Resources:
-----------------------------------------
Chef Extensibility:

Understanding Chef Extensibility: Custom Resources
 - Chef is designed to be extended and grow with the complexity and requirements of any environment.
 - Chef is also designed in a way that custom resources can be used to reduce repetative coding and manual errors that are accompanied with such coding.
Note : Custom resource exaples will be covered in later lessons

Understanding Chef Extensibility: Custom Resources:
 - Very Simply, a custom resource:
  -- Is a simple extension of Chef
  -- Is implemented as part of a cookbook (in the /resources directory)
 -- Follows easy, repeatable syntax patterns
 -- Effectively leverages resources that are build into Chef
 -- Is reusable in the same way as resources that are built into Chef
  -- Can be used to take complex resource declartions and reduce the properties required for configuration that allows less experienced admins to be able to use those custom resources rather than more complex resource policies
  
  Understanding Chef Extensibility: Libraries

Libraries in Chef are used to create reusable sets of code that can be placed or used within a recipe in a clean way.

Example:
 execute 'not-if-example' do
   command '/usr/bin/echo "10.0.2.1 webserver01">>/etc/hosts'
   not_if 'test -z $(grep "10.0.2.1 webserver01">>/etc/hosts)'
 end
 
 Take the "test -z$(grep "10.0.2.1 webserver01" /etc/hosts)" and add it to a library as a Ruby Function
(We will avoid the library code at the moment until knowledge on writing libraries is requied)
The execute resource type then looks liked this:

execute 'not-if-example' do
  command '/usr/bin/echo "10.0.2.1 webserver01">>/etc/hosts'
  not_if{has_host_entry?}
end

3.1 Chef Recipes
----------------
Recipes: We've been writing our resource blocks within a recipe.

Recipes are written using Ruby. There is no "custom" language to use Chef. Not a bunch of Ruby knowledge is required, just the basics, of which we will learn in the course.

Recipes are a collection of resources, defined and written using patterns. Helper code, such as loops and if statements, cab be written around those resources to help customize the configurations of specific nodes. For example, if or case statements around package names.

Chef defines a recipe as the most fundamental configuration element within the organization.
A recipe:
 - Is created using Ruby
 - Is a collection of resources defined using patterns; helper code is added using Ruby
 - Must define everything that is required to configure part of a system
 - Must be stored in a cookbook
 - May be included in a recipe(include_recipe)
 - May use the results of a search query and read the contents of a data bag
May have a dependency on one(or more) recipes
 - May tag a node to facilitate the creation of arbitrary groupings
- Must be added to a run-list before it can be used by the chef-client
 - is always executed in the same order as listed in a run-list
- if included multiple times in a run-list, will only be executed once.

Chef Resource Ordering Execution:

Resources are executed in the order that they are listed/created within a recipe, starting with the first recipe in a run-list
There are "directives" that can change the order in which resources are executed
 - notifies: A notification property that allows a resource to notify another resource to take action when its state changes.
 - subscribes: A notification property that allows a resource to listen to another resource and then take action if the state of the resource being listened to changes.
 
 Chef resource ordering exection
 --------------------------------

First Example
-------------
service 'httpd' do
 end

cookbook_file"/etc/httpd/conf/httpd.conf" do
  owner 'root'
  group 'root'
  mode '0644'
  source 'httpd.conf'
  notifies :restart, "service[httpd]"
end

Second Example
--------------
service 'httpd' do
  subscribes :reload, "cookbook_file[/etc/httpd/conf/httpd.conf]"
end

cookbook_file"/etc/httpd/conf/httpd.conf" do
  owner 'root'
  group 'root'
  mode '0644'
  source 'httpd.conf'
end

Third Example
------------
service 'httpd' do
  action [:enable,:start]
end

cookbook_file"/etc/httpd/conf/httpd.conf" do
  owner 'root'
  group 'root'
  mode '0644'
  source 'httpd.conf'
  notifies :restart, "service[httpd]"
end

A Brief Look at run_list
------------------------
A run-list is a list of cookbooks/recipes that are to be executed on the given node.

Example:
run_list "recipe[base]","recipe[apache]","recipe[selinux_policy]"

chef-client will execute the base recipe followed by apache, selinux_policy.
run_list "recipe[base::recipe]","recipe[apache::recipe]","recipe[selinux_policy::recipe]","recipe[base::recipe]"

Note : If for any reason a recipe is assigned to a node more than once (via roles/environments/etc.) chef-client will only execute it one time

78-666-2 - Understanding Chef Cookbooks
--------------------------------------
Cookbooks: A cookbook is the fundamental unit of configuration and policy distribution when using chef.
Cookbooks contain the following information:
 - Recipes
 - Attribute files
 - File distributions
 - Templates
 - Any extensions to Chef such as libraries and custom resources

A Chef cookbook defines a scenario. For example, our Apache cookbook. The cookbook defines everything needed to install and configure Apache.

Modules and additional Apache configurations required for our application can be broken out into individual recipes within the cookbook.

Cookbooks: README.md
--------------------
The cookbook readme file, located inside of cookbooks/cookbookname/README.md is a description of the cookbook's features that is written using Markdown.

Markdown is text-to-HTML conversion tool for makring it easy to write structurally valid HTML.

Cookbooks: metadata.rb
---------------------
Cookbook metadata is located in cookbooks/cookbookname/metadata.rb. Each cookbook requires certain metadata information.

Common Metadata Settings for Chef Fluency Badge
- Chef_version: Allows you to specify which version of Chef the cookbook requires to operate correctly
- Depends: Allows you to specify if there are another cookbook dependencies including the same cookbook but a different version(think back to include_receipe)
- version: Specifies the version of the cookbook. Chef Server stores the versions differently, allowing for version control of cookbooks within the chef server.

Cookbooks: metadata.rb
----------------------
name 'mycookbook'
maintainer 'The Authors'
maintainer_email 'you@example.com'
license 'all_rights'
description 'Installs/Configures mycookbook'
long_description 'Installs/Configures mycookbook'
version '0.1.0'
depends 'mysql', '>=10'

Cookbooks: Default cookbook recipe:
-----------------------------------
The default cookbook recipe is default.rb which is created with the cookbook. The main part of the configuration for the cookbook generally live here. For example, installing packages and starting services for the cookbook scenario(i.e Apache/MariaDB)

What does the default cookbook mean?

If you were to include a cookbook without a recipe in a run list, then by default it would run cookbookname::default the default recipe.

Cookbooks: Default Cookbook Recipe
----------------------------------
run_list "recipe[apache]"

This is the same as: run_list "recipe[apache::default]"

Use the apache cookbook and add the default recipe to the node's run-list. All other recipes in the cookbook, unless include_recipe is used, are ignored.

3.3 Generating a Cookbook
-------------------------
chef --help
# chef generate cookbook /root/workstation
# ls
# cd workstation
# cp /root/learn.rb /root/workstation/recipes
# ls
# vim default.rb
  package 'tree' do
  end

chef-client --local-mode recipes/default.rb

# tree

3.4 Cookbook Pro-Tips
---------------------
Pro-Tip 1: Be familiar with the ChefDK generators
Available Generators:
- chef generate app                 #Generate the application repo
- chef generate cookbook            #Generate a single cookbook
- chef generate recipe	            #Generate a new recipe
- chef generate attribute		#Generate a attributes file
- chef generate template		#Generate a file template
- chef generate file 			#Generate a cookbook file.
- chef generate lwrp			#Generate a lightweight recourse/provider
- chef generate repo			#Generate a Chef code repository
- chef generate policyfile		#Genearate a PolicyFile for use with install/push commands
- chef generate generator		#Copy ChefDK's generator cookbook to customize
- chef generate build-cookbook		#Genearate a build cookbook for delivery command

Directory structure of running: chef generate app my_app
--------------------------------------------------------
This is what a well-organized application repository looks like:
 - A README.md in the root directory
 - A test directory with a compliance profile in test/smoke/default/default_test.rb
- A cookbooks directory for multiple cookbooks
  - A cookbook called "my_app"
  - The cookbook contains:
    - Berksfile
    - chefignore
    - metadata.rb
    - A default recipe in recipes/default.rb
    - A starter unit test in spec/unit/recipes/default_spec.rb
 
 Unit tests run with the ChefSpec unit testing framework
 
 
 Directory structure of running: chef generate cookbook a_cookbook
-----------------------------------------------------------------
This is what a well-organized standalone cookbook looks lie:
 - Berksfile
 - chefignore
 - metadata.rb
 - README.md
 - A default recipe in recipes/default.rb
 - A starter unit test in spec/unit/recipes/default_spec.rb
 - A test directory with a compliance profile in test/smoke/default/default_test.rb

The primary difference is that the "test" diectory is now included in your cookbook directly

Pro-Tip 2: Upload environments from a file
------------------------------------------
environments/environment.json:
 {
	"name":"example",
	"description":"This is an example environment defined as JSON",
	"chef_type":"environment",
	"json_class":"Chef::Environment",
	"default_attributes":{ },
	"override_attributes":{ },
	"cookbook_versions":{
	  "example":"=1.0.0"
	}
      }

Deploy to Chef Server with knife environment from file environment.json

Pro-Tip 2: Upload roles from a file
------------------------------------------
roles/example.json:
 {
	"name":"example",
	"description":"This is an example role defined as JSON",
	"chef_type":"role",
	"json_class":"Chef::Role",
	"default_attributes":{ },
	"override_attributes":{ },
	"run_list":[
	  "recipe[example]"
	]
      }

Deploy to Chef Server with knife role from file example.json

Pro-Tip 4: Manage your dependencies:
------------------------------------
One way to manage your dependencies is to "vendor" the dependency into your repository:
 - knife cookbook site install httpd #Copy the httpd cookbook from the Supermarker
 - knife cookbook upload httpd   #upload the dependency into Chef Server

- We can only upload one cookbook at a time with knife cookbook upload

Another way to manage your dependencies is with Berkshelf
---------------------------------------------------------
- Berkshelf is included with the ChefDK with the berks command.
- You can specify a public or private Supermarket within your Berksfile and declare cookbooks that you depend on
	- berks install 	#Fetch dependencies from the Supermarket
	- berks upload		#Upload all dependencies and sub-dependencies to Chef Serve

	--Supply the SSL_CERT_FILE environment variable or pass in the --no-ssl-verify flag to configure berks to communicate with Chef Server
  
Pro-Tip 5: Use Wrapper cookbooks
---------------------------------
Wrapper cookbooks allow you to modify the behavior of upstream cookbooks without forking or vendoring them

To create a wrapper cookbook:
	- Generate a wrapper cookbook (e.g.: chef generate cookbook mycompany-ntp)
	- Add the dependency (i.e.: Add depends 'ntp' to your metadata.rb or add cookbook 'ntp' to your Berksfile)
	- Override attributes:
		-- mycompany-ntp/attributes/default.rb:
			--default ['ntp']['peers']=['ntp1.mycompany.com','ntp2.mycompany.com']
	- include the original cookbook in your recipe:
		-- my company-ntp/recipes/default.rb:
			-- include_recipe 'ntp"
You can wrap multiple cookbook recipes together to run in custom recipe




